openapi: 3.0.0
info:
  title: API Gestion Immobilier
  description: API pour la gestion de biens immobiliers, annonces, utilisateurs et réservations
  version: 1.0.0
  contact:
    name: Support Technique
    email: support@real-estate-api.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:3000/api
    description: Serveur de développement local
  - url: https://api.real-estate-example.com/api
    description: Serveur de production (exemple)

tags:
  - name: Authentification
    description: Gestion de l'inscription et la connexion des utilisateurs
  - name: Utilisateurs
    description: Opérations liées aux profils utilisateurs et favoris
  - name: Biens immobiliers
    description: Gestion complète des biens immobiliers
  - name: Annonces
    description: Gestion des annonces de vente ou location
  - name: Réservations
    description: Gestion des demandes de visite
  - name: Exemples
    description: Routes d'exemple (à des fins de démonstration ou de test)

paths:
  /auth/register: # Corrigé de /users/register
    post:
      tags:
        - Authentification
      summary: Inscription d'un nouvel utilisateur
      description: Permet de créer un nouveau compte utilisateur avec un rôle spécifique
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: Jean
                lastName:
                  type: string
                  example: Dupont
                email:
                  type: string
                  format: email
                  example: jean.dupont@example.com
                password:
                  type: string
                  format: password
                  example: motdepasse123
                  minLength: 6
                role:
                  type: string
                  enum: [client, propriétaire]
                  default: client
                  example: client
                phone:
                  type: string
                  example: "+33612345678"
      responses:
        '201': # Les codes de statut HTTP doivent être entre guillemets
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserResponse' # Correction du chemin
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' # Correction du chemin
              example:
                message: Cet email est déjà utilisé

  /auth/login: # Corrigé de /users/login
    post:
      tags:
        - Authentification
      summary: Connexion d'un utilisateur
      description: Authentifie un utilisateur et renvoie un token JWT et les informations utilisateur.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: jean.dupont@example.com
                password:
                  type: string
                  format: password
                  example: motdepasse123
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserResponse' # Correction du chemin
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...abc
        '401':
          description: Authentification échouée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' # Correction du chemin
              example:
                message: Email ou mot de passe incorrect

  /auth/refresh:
    post:
      tags:
        - Authentification
      summary: Rafraîchir le token d'authentification
      description: Permet d'obtenir un nouveau token d'accès en utilisant un refresh token valide.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...abc
      responses:
        '200':
          description: Token rafraîchi avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...xyz
        '401':
          description: Refresh token invalide ou expiré
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Refresh token invalide.

  /auth/logout:
    post:
      tags:
        - Authentification
      summary: Déconnexion d'un utilisateur
      description: Invalide le refresh token de l'utilisateur. Le token d'accès doit être supprimé côté client.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...abc
      responses:
        '200':
          description: Déconnexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déconnexion réussie.
        '400':
          description: Refresh token manquant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/forgot-password:
    post:
      tags:
        - Authentification
      summary: Demande de réinitialisation du mot de passe
      description: Envoie un email à l'utilisateur avec un lien pour réinitialiser son mot de passe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: jean.dupont@example.com
      responses:
        '200':
          description: Email de réinitialisation envoyé (si l'utilisateur existe)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Si un compte avec cet email existe, un lien de réinitialisation a été envoyé.
        '400':
          description: Email invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password/{token}:
    post:
      tags:
        - Authentification
      summary: Réinitialiser le mot de passe
      description: Permet à un utilisateur de définir un nouveau mot de passe en utilisant un token de réinitialisation valide.
      parameters:
        - name: token
          in: path
          required: true
          description: Token de réinitialisation reçu par email
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: nouveaumotdepasse456
      responses:
        '200':
          description: Mot de passe réinitialisé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Mot de passe réinitialisé avec succès.
        '400':
          description: Token invalide/expiré ou mot de passe non conforme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Token invalide ou expiré.

  /users:
    get:
      tags:
        - Utilisateurs
      summary: Récupérer tous les utilisateurs (admin)
      description: Permet à un administrateur de récupérer la liste de tous les utilisateurs.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs récupérée avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/me:
    get:
      tags:
        - Utilisateurs
      summary: Récupérer le profil de l'utilisateur connecté
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profil récupéré avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Utilisateurs
      summary: Mettre à jour le profil de l'utilisateur
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                avatar:
                  type: string
      responses:
        200:
          description: Profil mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'

  /users/favorites:
    get:
      tags:
        - Utilisateurs
      summary: Récupérer les biens favoris de l'utilisateur
      security:
        - BearerAuth: []
      responses:
        200:
          description: Liste des favoris récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        401:
          $ref: '#/components/responses/Unauthorized'

  /users/favorites/{id}:
    post:
      tags:
        - Utilisateurs
      summary: Ajouter un bien immobilier aux favoris
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Bien ajouté aux favoris avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bien ajouté aux favoris
        400:
          description: Erreur de requête
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Ce bien est déjà dans vos favoris
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Utilisateurs
      summary: Supprimer un bien immobilier des favoris
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Bien supprimé des favoris avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bien supprimé des favoris
        400:
          description: Erreur de requête
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Ce bien n'est pas dans vos favoris
        401:
          $ref: '#/components/responses/Unauthorized'

  /properties:
    get:
      tags:
        - Biens immobiliers
      summary: Récupérer tous les biens immobiliers
      description: Récupérer la liste des biens immobiliers avec pagination et filtres
      parameters:
        - name: page
          in: query
          description: Numéro de page
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Nombre d'éléments par page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: type
          in: query
          description: Type de bien
          schema:
            type: string
            enum: [appartement, maison, terrain, commerce, bureau, garage]
        - name: minPrice
          in: query
          description: Prix minimum
          schema:
            type: integer
            minimum: 0
        - name: maxPrice
          in: query
          description: Prix maximum
          schema:
            type: integer
            minimum: 0
        - name: city
          in: query
          description: Ville
          schema:
            type: string
        - name: minSurface
          in: query
          description: Surface minimum en m²
          schema:
            type: integer
            minimum: 0
        - name: maxSurface
          in: query
          description: Surface maximum en m²
          schema:
            type: integer
            minimum: 0
        - name: rooms
          in: query
          description: Nombre de pièces
          schema:
            type: integer
            minimum: 0
        - name: status
          in: query
          description: Statut du bien
          schema:
            type: string
            enum: [disponible, vendu, loué, réservé]
      responses:
        '200':
          description: Liste des biens récupérée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - Biens immobiliers
      summary: Créer un nouveau bien immobilier
      description: Crée un nouveau bien immobilier. Nécessite authentification et autorisation (propriétaire ou admin).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyInput'
      responses:
        '201':
          description: Bien immobilier créé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /properties/{id}:
    get:
      tags:
        - Biens immobiliers
      summary: Récupérer un bien immobilier par son ID
      description: Récupère les détails d'un bien immobilier spécifique.
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Bien immobilier récupéré avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Biens immobiliers
      summary: Mettre à jour un bien immobilier
      description: Met à jour les informations d'un bien immobilier existant. Nécessite authentification et autorisation (propriétaire ou admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyInput'
      responses:
        '200':
          description: Bien immobilier mis à jour avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Biens immobiliers
      summary: Supprimer un bien immobilier
      description: Supprime un bien immobilier. Nécessite authentification et autorisation (propriétaire ou admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Bien immobilier supprimé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bien immobilier supprimé avec succès.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /properties/{id}/images:
    get:
      tags:
        - Biens immobiliers
      summary: Récupérer les images d'un bien immobilier
      description: Récupère la liste des images associées à un bien immobilier.
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Images récupérées avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyImage'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Biens immobiliers
      summary: Ajouter des images à un bien immobilier
      description: Ajoute une ou plusieurs images à un bien immobilier. Nécessite authentification et autorisation.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Images ajoutées avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyImage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /properties/{id}/images/{imageId}:
    delete:
      tags:
        - Biens immobiliers
      summary: Supprimer une image d'un bien immobilier
      description: Supprime une image spécifique d'un bien immobilier. Nécessite authentification et autorisation.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
        - name: imageId
          in: path
          required: true
          description: ID de l'image à supprimer
          schema:
            type: string
            example: image123
      responses:
        '200':
          description: Image supprimée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image supprimée avec succès.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /ads:
    get:
      tags:
        - Annonces
      summary: Récupérer toutes les annonces
      description: Récupère la liste des annonces avec options de filtrage et pagination.
      parameters:
        - name: page
          in: query
          description: Numéro de page
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Nombre d'éléments par page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: propertyId
          in: query
          description: Filtrer par ID de propriété
          schema:
            type: string
        - name: status
          in: query
          description: Filtrer par statut de l'annonce
          schema:
            type: string
            enum: [active, inactive, pending, sold, rented]
        - name: type
          in: query
          description: Filtrer par type d'annonce (vente, location)
          schema:
            type: string
            enum: [vente, location]
        - name: minPrice
          in: query
          description: Prix minimum
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Prix maximum
          schema:
            type: number
        - name: highlighted
          in: query
          description: Filtrer les annonces mises en avant
          schema:
            type: boolean
      responses:
        '200':
          description: Liste des annonces récupérée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ad'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - Annonces
      summary: Créer une nouvelle annonce
      description: Crée une nouvelle annonce pour un bien immobilier. Nécessite authentification (propriétaire ou admin).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdInput'
      responses:
        '201':
          description: Annonce créée avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /ads/property/{propertyId}:
    get:
      tags:
        - Annonces
      summary: Récupérer les annonces d'un bien immobilier
      description: Récupère toutes les annonces associées à un bien immobilier spécifique.
      parameters:
        - name: propertyId
          in: path
          required: true
          description: ID du bien immobilier
          schema:
            type: string
            example: property123
      responses:
        '200':
          description: Annonces récupérées avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ad'
        '404':
          $ref: '#/components/responses/NotFound'

  /ads/{id}:
    get:
      tags:
        - Annonces
      summary: Récupérer une annonce par son ID
      description: Récupère les détails d'une annonce spécifique.
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Annonce récupérée avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Annonces
      summary: Mettre à jour une annonce
      description: Met à jour les informations d'une annonce existante. Nécessite authentification (propriétaire ou admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdInput'
      responses:
        '200':
          description: Annonce mise à jour avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Annonces
      summary: Supprimer une annonce
      description: Supprime une annonce. Nécessite authentification (propriétaire ou admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Annonce supprimée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Annonce supprimée avec succès.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /ads/{id}/highlight:
    put:
      tags:
        - Annonces
      summary: Mettre en avant une annonce
      description: Active ou désactive la mise en avant d'une annonce. Nécessite authentification (propriétaire ou admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - highlight
              properties:
                highlight:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Statut de mise en avant de l'annonce mis à jour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /ads/{id}/status:
    put:
      tags:
        - Annonces
      summary: Mettre à jour le statut d'une annonce
      description: Met à jour le statut d'une annonce (ex active, inactive, vendue). Nécessite authentification (propriétaire ou admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [active, inactive, pending, sold, rented]
                  example: active
      responses:
        '200':
          description: Statut de l'annonce mis à jour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /bookings:
    get:
      tags:
        - Réservations
      summary: Récupérer les réservations
      description: Récupère les réservations. Filtrées par rôle (client, propriétaire, admin).
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Numéro de page
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Nombre d'éléments par page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filtrer par statut de la réservation
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed, rejected]
        - name: propertyId
          in: query
          description: Filtrer par ID de propriété (pour propriétaires/admins)
          schema:
            type: string
        - name: userId
          in: query
          description: Filtrer par ID utilisateur (pour admins)
          schema:
            type: string
      responses:
        '200':
          description: Liste des réservations récupérée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Réservations
      summary: Créer une nouvelle demande de visite
      description: Crée une nouvelle demande de visite pour un bien. Nécessite authentification (client).
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingInput'
      responses:
        '201':
          description: Demande de visite créée avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /bookings/{id}:
    get:
      tags:
        - Réservations
      summary: Récupérer une réservation par son ID
      description: Récupère les détails d'une réservation spécifique. Nécessite authentification (client, propriétaire, admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Réservation récupérée avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Réservations
      summary: Annuler une réservation
      description: Annule une réservation. Conditions varient par rôle. Nécessite authentification.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Réservation annulée avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Réservation annulée avec succès.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /bookings/{id}/status:
    put:
      tags:
        - Réservations
      summary: Mettre à jour le statut d'une réservation
      description: Met à jour le statut d'une réservation (ex confirmer, annuler). Nécessite authentification (propriétaire, admin).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, cancelled, completed, rejected]
                  example: confirmed
      responses:
        '200':
          description: Statut de la réservation mis à jour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /bookings/{id}/feedback:
    post:
      tags:
        - Réservations
      summary: Ajouter un avis client après une visite
      description: Permet à un client d'ajouter un avis après une visite. Nécessite authentification (client).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackInput'
      responses:
        '201':
          description: Avis ajouté avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /bookings/{id}/owner-feedback:
    post:
      tags:
        - Réservations
      summary: Ajouter un commentaire du propriétaire après une visite
      description: Permet au propriétaire d'ajouter un commentaire sur une visite. Nécessite authentification (propriétaire).
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackInput'
      responses:
        '201':
          description: Commentaire du propriétaire ajouté avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /bookings/property/{propertyId}:
    get:
      tags:
        - Réservations
      summary: Récupérer les réservations d'un bien immobilier
      description: Récupère toutes les réservations pour un bien spécifique. Nécessite authentification (propriétaire, admin).
      security:
        - BearerAuth: []
      parameters:
        - name: propertyId
          in: path
          required: true
          description: ID du bien immobilier
          schema:
            type: string
            example: property123
        - name: page
          in: query
          description: Numéro de page
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Nombre d'éléments par page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filtrer par statut
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed, rejected]
      responses:
        '200':
          description: Réservations pour le bien récupérées avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /examples:
    get:
      tags:
        - Exemples
      summary: Récupérer tous les exemples
      description: Récupère une liste de tous les éléments d'exemple.
      responses:
        '200':
          description: Liste des exemples récupérée avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Example'
    post:
      tags:
        - Exemples
      summary: Créer un nouvel exemple
      description: Crée un nouvel élément d'exemple.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExampleInput'
      responses:
        '201':
          description: Exemple créé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '400':
          $ref: '#/components/responses/BadRequest'

  /examples/{id}:
    get:
      tags:
        - Exemples
      summary: Récupérer un exemple par son ID
      description: Récupère les détails d'un élément d'exemple spécifique.
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Exemple récupéré avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Example'
        '404':
          description: Exemple non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Utilisez un token JWT pour vous authentifier

  parameters:
    idParam:
      name: id
      in: path
      required: true
      description: ID de la ressource
      schema:
        type: string
        # example: 60d0fe4f5311236168a109ca (Example of a MongoDB ObjectId)

  responses:
    BadRequest:
      description: Requête invalide. Les détails de l'erreur sont fournis dans le corps de la réponse.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Validation errors"
            errors: [{ "msg": "Invalid value", "param": "field_name", "location": "body" }]
    Unauthorized:
      description: Authentification requise. Le token JWT est manquant, invalide ou expiré.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Accès non autorisé. Veuillez vous connecter.
    Forbidden:
      description: Accès refusé. L'utilisateur authentifié n'a pas les droits nécessaires pour accéder à cette ressource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Accès non autorisé à cette ressource.
    NotFound:
      description: Ressource non trouvée. La ressource demandée n'existe pas.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Ressource introuvable.
    InternalError:
      description: Erreur interne du serveur. Un problème inattendu est survenu.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Erreur serveur interne.

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: Message d'erreur principal.
        errors:
          type: array
          description: Liste détaillée des erreurs de validation (optionnel).
          items:
            type: object
            properties:
              msg:
                type: string
                description: Description de l'erreur.
              param:
                type: string
                description: Nom du paramètre concerné.
              location:
                type: string
                description: Emplacement du paramètre (ex: body, query, params).
          nullable: true

    UserResponse: # Utilisé pour les réponses de login/register
      type: object
      properties:
        id:
          type: string
          description: ID de l'utilisateur.
        firstName:
          type: string
          description: Prénom de l'utilisateur.
        lastName:
          type: string
          description: Nom de l'utilisateur.
        email:
          type: string
          format: email
          description: Email de l'utilisateur.
        role:
          type: string
          description: Rôle de l'utilisateur.

    User: # Schéma complet de l'utilisateur
      type: object
      properties:
        _id:
          type: string
          description: ID unique de l'utilisateur (MongoDB ObjectId).
        firstName:
          type: string
          example: Jean
        lastName:
          type: string
          example: Dupont
        email:
          type: string
          format: email
          example: jean.dupont@example.com
        role:
          type: string
          enum: [client, propriétaire, admin]
          example: client
        phone:
          type: string
          nullable: true
          example: "+33612345678"
        avatar:
          type: string
          format: url
          nullable: true
          example: http://example.com/avatar.jpg
        favorites:
          type: array
          items:
            type: string # ID de Property
          description: Liste des ID des biens immobiliers favoris.
        verified:
          type: boolean
          description: Indique si l'email de l'utilisateur a été vérifié.
          default: false
        createdAt:
          type: string
          format: date-time
          description: Date de création du compte.
        updatedAt:
          type: string
          format: date-time
          description: Date de la dernière mise à jour du compte.

    PropertyImage:
      type: object
      properties:
        _id:
          type: string
          description: ID unique de l'image (MongoDB ObjectId).
        url:
          type: string
          format: url
          description: URL de l'image.
          example: http://example.com/images/property1.jpg
        altText:
          type: string
          description: Texte alternatif pour l'image (pour l'accessibilité).
          nullable: true
          example: Façade de la maison
        uploadedAt:
          type: string
          format: date-time
          description: Date d'upload de l'image.

    PropertyInput: # Pour la création et la mise à jour de biens
      type: object
      required:
        - title
        - description
        - type
        - price
        - surface
        - address
      properties:
        title:
          type: string
          example: Superbe villa avec piscine
        description:
          type: string
          example: Villa spacieuse avec grand jardin et piscine, proche commodités.
        type:
          type: string
          enum: [appartement, maison, terrain, commerce, bureau, garage]
          example: maison
        price:
          type: number
          format: float # Préciser float pour les prix
          example: 450000.00
        surface:
          type: number
          format: float
          description: Surface en m².
          example: 150.5
        rooms:
          type: integer
          description: Nombre de pièces.
          example: 5
          nullable: true
        bedrooms:
          type: integer
          description: Nombre de chambres.
          example: 3
          nullable: true
        bathrooms:
          type: integer
          description: Nombre de salles de bain.
          example: 2
          nullable: true
        address:
          type: object
          required:
            - city
            - zipCode
            - country
          properties:
            street:
              type: string
              example: 12 Rue des Lilas
              nullable: true
            city:
              type: string
              example: Nice
            zipCode:
              type: string
              example: "06000"
            country:
              type: string
              example: France
            location: # GeoJSON Point
              type: object
              description: Coordonnées géographiques (longitude, latitude).
              properties:
                # type:
                #   type: string
                #   enum: [Point]
                #   default: Point
                coordinates:
                  type: array
                  items:
                    type: number
                    format: double # Préciser double pour les coordonnées
                  example: [7.261953, 43.710173] # lon, lat pour Nice
              nullable: true
        features:
          type: array
          items:
            type: string
          example: [piscine, jardin, garage, balcon]
          nullable: true
        yearBuilt:
          type: integer
          description: Année de construction.
          example: 1998
          nullable: true
        status:
          type: string
          enum: [disponible, vendu, loué, réservé]
          example: disponible
          default: disponible

    Property: # Schéma complet d'un bien immobilier
      allOf:
        - $ref: '#/components/schemas/PropertyInput'
        - type: object
          properties:
            _id:
              type: string
              description: ID unique du bien (MongoDB ObjectId).
            owner:
              oneOf: # Peut être un ID ou un objet User peuplé
                - type: string
                  description: ID du propriétaire.
                - $ref: '#/components/schemas/User'
            images:
              type: array
              items:
                $ref: '#/components/schemas/PropertyImage'
              description: Liste des images du bien.
              nullable: true
            createdAt:
              type: string
              format: date-time
              description: Date de création de la fiche du bien.
            updatedAt:
              type: string
              format: date-time
              description: Date de la dernière mise à jour de la fiche du bien.

    AdInput: # Pour la création et la mise à jour d'annonces
      type: object
      required:
        - title
        - description
        - type
        - price
        - property # ID du Property
      properties:
        title:
          type: string
          example: À Vendre: Villa d'exception Nice Collines
        description:
          type: string
          example: Opportunité unique, villa avec vue mer panoramique.
        type:
          type: string
          enum: [vente, location]
          example: vente
        price:
          type: number
          format: float
          description: Prix de vente ou loyer mensuel.
          example: 1250000.00
        property:
          type: string
          description: ID du bien immobilier concerné par l'annonce.
        status:
          type: string
          enum: [active, inactive, pending, sold, rented, expired]
          default: pending
          example: active
        highlighted:
          type: boolean
          default: false
          description: Mettre l'annonce en avant.
        # Pour les locations, des détails supplémentaires pourraient être utiles
        # rentalDetails:
        #   type: object
        #   properties:
        #     deposit:
        #       type: number
        #       format: float
        #     minLeaseDurationMonths:
        #       type: integer
        #     furnished:
        #       type: boolean
        #   nullable: true

    Ad: # Schéma complet d'une annonce
      allOf:
        - $ref: '#/components/schemas/AdInput'
        - type: object
          properties:
            _id:
              type: string
              description: ID unique de l'annonce (MongoDB ObjectId).
            owner: # ID de l'utilisateur qui a posté l'annonce (peut être différent du propriétaire du bien)
              oneOf:
                - type: string
                  description: ID du créateur de l'annonce.
                - $ref: '#/components/schemas/User'
            property: # Peut être un ID ou un objet Property peuplé
              oneOf:
                - type: string
                  description: ID du bien immobilier.
                - $ref: '#/components/schemas/Property'
            viewCount:
              type: integer
              default: 0
              description: Nombre de vues de l'annonce.
            contactRequests:
              type: integer
              default: 0
              description: Nombre de demandes de contact pour cette annonce.
            createdAt:
              type: string
              format: date-time
              description: Date de création de l'annonce.
            updatedAt:
              type: string
              format: date-time
              description: Date de la dernière mise à jour de l'annonce.
            publishedAt:
              type: string
              format: date-time
              nullable: true
              description: Date de publication (si statut active).
            expiresAt:
              type: string
              format: date-time
              nullable: true
              description: Date d'expiration de l'annonce.

    FeedbackInput: # Pour ajouter un avis/commentaire
      type: object
      required:
        - text
      properties:
        text:
          type: string
          description: Contenu du feedback ou de l'avis.
          example: "Visite très instructive, le bien correspond à la description."
        rating: # Principalement pour l'avis client
          type: integer
          minimum: 1
          maximum: 5
          description: Notation donnée (par le client, par exemple).
          example: 4
          nullable: true

    BookingInput: # Pour créer une demande de visite
      type: object
      required:
        - property # ID de Property
        - ad # ID de Ad (optionnel, mais recommandé si la visite est suite à une annonce)
        - date
        - timeSlot
      properties:
        property:
          type: string
          description: ID du bien à visiter.
        ad:
          type: string
          description: ID de l'annonce associée (si applicable).
          nullable: true
        date:
          type: string
          format: date
          example: '2025-07-10'
        timeSlot:
          type: object
          required:
            - start
            - end
          properties:
            start:
              type: string # Format HH:mm
              example: '14:00'
            end:
              type: string # Format HH:mm
              example: '15:00'
        message:
          type: string
          description: Message optionnel pour la demande de visite.
          example: "Je suis très intéressé(e) et disponible aux créneaux proposés."
          nullable: true

    Booking: # Schéma complet d'une réservation/demande de visite
      allOf:
        - $ref: '#/components/schemas/BookingInput'
        - type: object
          properties:
            _id:
              type: string
              description: ID unique de la réservation (MongoDB ObjectId).
            client: # Utilisateur qui fait la demande
              oneOf:
                - type: string
                  description: ID du client.
                - $ref: '#/components/schemas/User'
            owner: # Propriétaire du bien (pour référence)
              oneOf:
                - type: string
                  description: ID du propriétaire du bien.
                - $ref: '#/components/schemas/User'
            property: # Peut être un ID ou un objet Property peuplé
              oneOf:
                - type: string
                  description: ID du bien concerné.
                - $ref: '#/components/schemas/Property'
            ad: # Peut être un ID ou un objet Ad peuplé
              oneOf:
                - type: string
                  description: ID de l'annonce concernée.
                - $ref: '#/components/schemas/Ad'
              nullable: true
            status:
              type: string
              enum: [pending, confirmed, cancelled_by_client, cancelled_by_owner, completed, rejected, rescheduled]
              default: pending
              example: confirmed
            notes: # Notes internes pour le propriétaire ou l'admin
              type: string
              nullable: true
            feedbackClient:
              type: object
              properties:
                text:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
              nullable: true
              description: Avis laissé par le client après la visite.
            feedbackOwner:
              type: object
              properties:
                text:
                  type: string
              nullable: true
              description: Commentaire laissé par le propriétaire après la visite.
            createdAt:
              type: string
              format: date-time
              description: Date de création de la demande.
            updatedAt:
              type: string
              format: date-time
              description: Date de la dernière mise à jour de la demande.

    ExampleInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Mon Premier Exemple
        description:
          type: string
          example: Ceci est une description détaillée de mon exemple.
          nullable: true
        value:
          type: number
          example: 123.45
          nullable: true

    Example:
      allOf:
        - $ref: '#/components/schemas/ExampleInput'
        - type: object
          properties:
            _id:
              type: string
              description: ID unique de l'exemple (MongoDB ObjectId).
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Pagination: # Pour les réponses listant plusieurs items
      type: object
      properties:
        totalItems:
          type: integer
          description: Nombre total d'éléments disponibles.
        currentPage:
          type: integer
          description: Page actuelle.
        pageSize:
          type: integer
          description: Nombre d'éléments par page.
        totalPages:
          type: integer
          description: Nombre total de pages.
        hasNextPage:
          type: boolean
          description: Indique s'il y a une page suivante.
        hasPrevPage:
          type: boolean
          description: Indique s'il y a une page précédente.
